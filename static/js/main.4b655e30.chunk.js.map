{"version":3,"sources":["components/Calculator.js","components/Inputs.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","e","this","props","changeOne","target","childNodes","data","className","onClick","makeEvents","bind","id","colSpan","value","rowSpan","React","Component","Inputs","console","log","one","two","slice","length","App","state","valueForFirstField","valueForSecondField","changeValueForFirstField","isNaN","item","setState","replace","equal","indexOf","legth","parser","evaluate","Parser","changeTwo","changeValueForSecondField","rel","href","integrity","crossorigin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b655e30.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nexport default class Calculator extends React.Component {\r\n\r\n  makeEvents (e) {\r\n    this.props.changeOne(e.target.childNodes[0].data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"section\">\r\n        <div className=\"row\">\r\n          <table onClick={this.makeEvents.bind(this)}>\r\n            <tr>\r\n              <td id=\"clear\" className=\"quadrate quadrate-wide red\" colSpan=\"2\">\r\n                AC\r\n              </td>\r\n              <td id=\"divide\" className=\"quadrate\">/</td>\r\n              <td id=\"multiply\" className=\"quadrate\">*</td>\r\n            </tr>\r\n            <tr>\r\n              <td id=\"seven\" value=\"7\" className=\"quadrate\">7</td>\r\n              <td id=\"eight\" className=\"quadrate\">8</td>\r\n              <td id=\"nine\" className=\"quadrate\">9</td>\r\n              <td id=\"add\" className=\"quadrate\">+</td>\r\n            </tr>\r\n            <tr>\r\n              <td id=\"four\" className=\"quadrate\">4</td>\r\n              <td id=\"five\" className=\"quadrate\">5</td>\r\n              <td id=\"six\" className=\"quadrate\">6</td>\r\n              <td id=\"subtract\" className=\"quadrate\">-</td>\r\n            </tr>\r\n            <tr>\r\n              <td id=\"one\" className=\"quadrate\">1</td>\r\n              <td id=\"two\" className=\"quadrate\">2</td>\r\n              <td id=\"three\" className=\"quadrate\">3</td>\r\n              <td id=\"equals\" rowSpan=\"2\" className=\"quadrate quadrate-tall blue\">\r\n                =\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td id=\"zero\" className=\"quadrate quadrate-wide\" colSpan=\"2\">\r\n                0\r\n              </td>\r\n              <td id=\"decimal\" className=\"quadrate\">.</td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default class Inputs extends React.Component {\r\n  render() {\r\n    console.log(this.props, typeof(this.props.one[0]))\r\n    return (\r\n      <>\r\n        <div id=\"first-input\">{this.props.two[0] === '0' && this.props.two[1] !== '.' ? this.props.two.slice(1) : this.props.two}</div>\r\n        <div className=\"inputs\" id=\"display\">{this.props.one[0] === '0' && this.props.one.length !== 1 && this.props.one[1] !== '.' ? this.props.one.slice(1) : this.props.one}</div>\r\n        </>\r\n    );\r\n  }\r\n}","import React from \"react\";\nimport { Parser } from \"expr-eval\";\n\nimport \"./App.css\";\nimport Calculator from \"./components/Calculator\";\nimport Inputs from \"./components/Inputs\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.parser = new Parser();\n  }\n  state = {\n    valueForFirstField: \"0\",\n    valueForSecondField: \"0\",\n  };\n\n  changeValueForFirstField = value => {\n    if (this.state.valueForFirstField[this.state.valueForFirstField.length - 1] === '.' && value === '.') return;\n    if (this.state.valueForFirstField[0] === '0' && value === '0') return;\n    console.log(value, typeof(value), value === '=')\n    if (this.state.valueForFirstField.length >= 17 && !isNaN(+value) && value !== '.') {\n      return;\n    }\n    if (value === \"AC\") {\n      this.setState({\n        valueForFirstField: \"0\",\n        valueForSecondField: \"\"\n      });\n      return;\n    }\n    if (value === \"=\") {\n      this.setState({\n        valueForFirstField: `${this.parser.evaluate(\n          this.state.valueForSecondField\n        )}`,\n        valueForSecondField: `${\n          this.state.valueForSecondField\n        }=${this.parser.evaluate(this.state.valueForSecondField)}`\n      });\n      return;\n    }\n    if (\n      isNaN(+value) &&\n      value !== \".\" &&\n      isNaN(\n        +this.state.valueForSecondField[\n          this.state.valueForSecondField.length - 1\n        ]\n      ) &&\n      this.state.valueForSecondField[\n        this.state.valueForSecondField.length - 1\n      ] !== \".\"\n    ) {\n      const item = this.state.valueForSecondField[this.state.valueForSecondField.length - 1];\n      this.setState({\n        valueForFirstField: value,\n        valueForSecondField: this.state.valueForSecondField.replace(item, value)\n      })\n      return;\n    }\n    const equal = this.state.valueForSecondField.indexOf(\"=\");\n    if (equal !== -1) {\n      this.setState({\n        valueForSecondField: this.state.valueForFirstField + value,\n        valueForFirstField: this.state.valueForFirstField + value\n      });\n      return;\n    }\n    if (!isNaN(+value) || value === \".\") {\n      console.log(\n        this.state.valueForFirstField,\n        isNaN(+this.state.valueForFirstField)\n      );\n      if (isNaN(+this.state.valueForFirstField)) {\n        console.log(1);\n        this.setState({\n          valueForFirstField: value,\n          valueForSecondField: this.state.valueForSecondField + value\n        });\n      } else if (\n        this.state.valueForSecondField.legth <=\n        this.state.valueForFirstField.legth\n      ) {\n        console.log(2);\n        this.setState({\n          valueForFirstField: this.state.valueForFirstField + value,\n          valueForSecondField: this.state.valueForFirstField + value\n        });\n      } else {\n        this.setState({\n          valueForFirstField: this.state.valueForFirstField + value,\n          valueForSecondField: this.state.valueForSecondField + value\n        });\n      }\n    } else if (equal === -1) {\n      this.setState({\n        valueForFirstField: value,\n        valueForSecondField: this.state.valueForSecondField + value\n      });\n    } else {\n      this.setState({\n        valueForSecondField: this.state.valueForFirstField + value,\n        valueForFirstField: value\n      });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <main>\n          <div className=\"calculator-container\">\n            <Inputs\n              one={this.state.valueForFirstField}\n              two={this.state.valueForSecondField}\n            />\n            <Calculator\n              changeOne={this.changeValueForFirstField}\n              changeTwo={this.changeValueForSecondField}\n            />\n          </div>\n        </main>\n\n        <link\n          rel=\"stylesheet\"\n          href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n          crossorigin=\"anonymous\"\n        />\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}